
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    static CameraFeeds cameras;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        autonomousCommand = new AutoMoveBackwards();

		autoChooser = new SendableChooser();
		autoChooser.addDefault("Default", new AutonomousCommand());
        autoChooser.addObject("MoveBackwards", new AutoMoveBackwards());
        autoChooser.addObject("Nothing", new WaitFor());
        SmartDashboard.putData("Pick Auto:", autoChooser);
        
    }
    
    	private void initSendableChooser() {
		
	
    public void autonomousInit() {
        // schedule the autonomous command (example)
    	
    	try {
//			Command commandFromChooser = (Command) autoChooser.getSelected();
    	if (commandFromChooser != null) {
    		autonomousCommand = commandFromChooser;
    	}
//			if (autonomousCommand != null) autonomousCommand.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    
    private void readAutonomousFromChooser() {
		
	}
    







    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	smartDashboardIO.execute();
        Scheduler.getInstance().run();
        
        }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	smartDashboardIO.execute();
        Scheduler.getInstance().run();
        oi.execute();
        try{cameras.run();} catch(Exception e){}
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        smartDashboardIO.execute();
    }
    
    public static void switchCameras() {
    	try{cameras.switchCams();}
    	catch(Exception e){}
    }
    
    public static void frontCamera(){
    	try {
    		cameras.changeCam(cameras.camFront);
    	}
    	catch (Exception e){}
    }
    
    public static void rearCamera(){
    	try {
    		cameras.changeCam(cameras.camRear);
    	}
    	catch (Exception e){}
    }
}
