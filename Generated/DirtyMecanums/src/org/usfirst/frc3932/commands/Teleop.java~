// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.commands;

import org.usfirst.frc3932.Robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class  Teleop extends Command {

    public Teleop() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Joystick joystick = Robot.oi.getDriverJoy1();
    	Robot.driveSystem.drive(joystick.getX(), joystick.getY(), joystick.getRawAxis(3));
    	
    	if (!Robot.gates.gatesOpen() && Robot.elevator.getHeight() < 46.125 && Robot.elevator.getHeight() > 38.125 && !Robot.toteTabs.isDisableSafety()) {
    		
    		Robot.toteTabs.toteTabsOpen();
    	}
    	else {
    		Robot.toteTabs.toteTabsOff();
    	}
    	
    	if (!Robot.gates.gatesOpen() && Robot.elevator.getHeight() < 63.25 && Robot.elevator.getHeight() > 55.25 && !Robot.canTabs.isDisableSafety()) {
    		Robot.canTabs.canTabsOpen();
    	}
    	else {
    		Robot.canTabs.canTabsOff();
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
