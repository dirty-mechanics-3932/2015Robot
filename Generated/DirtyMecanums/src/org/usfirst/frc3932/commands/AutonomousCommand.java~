// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc3932.Robot;

/**
 *
 */
public class  AutonomousCommand extends Command {

	private static final int AUTO_EXEC_TIME = 10;
	Timer timer = null;
	Command currentCommand = null;
	boolean emergencyExit = false;
	
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer = new Timer();
    	currentCommand = new AutonomousPickup();
    	currentCommand.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (isTimeToPutDownAndBackAway()){
    		putDownAndBackAway();
    	}
    	else if (timer.hasPeriodPassed(AUTO_EXEC_TIME)){
    		autoEmergencyExit();
    	}
    }

	private void autoEmergencyExit() {
		currentCommand.cancel();
		currentCommand = new AutoMoveBackwards();
		currentCommand.start();
		emergencyExit = true;
	}

	private void putDownAndBackAway() {
		currentCommand.cancel();
		currentCommand = new AutonomousSetDown();
		currentCommand.start();
	}

	private boolean isTimeToPutDownAndBackAway() {
		//Order here is important.  If hasPeriodPassed evaluates true the time gets reset.
		return timer.hasPeriodPassed(14.5) || (emergencyExit && timer.hasPeriodPassed(1.5));
	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
