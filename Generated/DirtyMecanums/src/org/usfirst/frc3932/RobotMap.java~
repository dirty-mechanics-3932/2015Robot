// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932;
    
import org.usfirst.frc3932.sensor.BalancingAccelerometer;

import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveSystemLeftFront;
    public static CANTalon driveSystemRightBack;
    public static CANTalon driveSystemLeftBack;
    public static CANTalon driveSystemRightFront;
    public static RobotDrive driveSystemMecanumDrive;
    public static AnalogInput driveSystemLeftForwardUltra;
    public static AnalogInput driveSystemRightForwardUltra;
    public static AnalogAccelerometer driveSystemBuiltinAccelerometer;
    public static DigitalInput elevatorbottomLimitSwitch;
    public static CANTalon elevatorElevatorCANTalon;
    public static Solenoid lightsSignalLED;
    public static Compressor pneumaticArmscompressor;
    public static DoubleSolenoid pneumaticArmsarmsSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static BalancingAccelerometer balancingAccelerometer;
    public static PIDController balancingPidController;
    public static void init() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemLeftFront = new CANTalon(3);
        
        
        driveSystemRightBack = new CANTalon(4);
        
        
        driveSystemLeftBack = new CANTalon(5);
        
        
        driveSystemRightFront = new CANTalon(2);
        
        
        driveSystemMecanumDrive = new RobotDrive(driveSystemLeftFront, driveSystemLeftBack,
              driveSystemRightFront, driveSystemRightBack);
        
        driveSystemMecanumDrive.setSafetyEnabled(true);
        driveSystemMecanumDrive.setExpiration(0.1);
        driveSystemMecanumDrive.setSensitivity(0.5);
        driveSystemMecanumDrive.setMaxOutput(1.0);
        driveSystemMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveSystemMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveSystemLeftForwardUltra = new AnalogInput(0);
        LiveWindow.addSensor("DriveSystem", "LeftForwardUltra", driveSystemLeftForwardUltra);
        
        driveSystemRightForwardUltra = new AnalogInput(1);
        LiveWindow.addSensor("DriveSystem", "RightForwardUltra", driveSystemRightForwardUltra);
        
        driveSystemBuiltinAccelerometer = new AnalogAccelerometer(5);
        LiveWindow.addSensor("DriveSystem", "BuiltinAccelerometer", driveSystemBuiltinAccelerometer);
        driveSystemBuiltinAccelerometer.setSensitivity(0.0);
        driveSystemBuiltinAccelerometer.setZero(2.5);
        elevatorbottomLimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "bottomLimitSwitch", elevatorbottomLimitSwitch);
        
        elevatorElevatorCANTalon = new CANTalon(7);
        
        
        lightsSignalLED = new Solenoid(0, 0);
        LiveWindow.addActuator("Lights", "SignalLED", lightsSignalLED);
        
        pneumaticArmscompressor = new Compressor(0);
        
        
        pneumaticArmsarmsSolenoid = new DoubleSolenoid(0, 1, 2);      
        LiveWindow.addActuator("PneumaticArms", "armsSolenoid", pneumaticArmsarmsSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //Override the port for the builtin...
        balancingAccelerometer = new BalancingAccelerometer(Accelerometer.Range.k4G);
        balancingPidController = new PIDController(.050, 0.0, 0.0, 0.0, (PIDSource) balancingAccelerometer, driveSystemLeftFront, 0.02);
        LiveWindow.addActuator("DriveSystem", "PidBalanceController", balancingPidController);
        balancingPidController.setContinuous(false); 
        balancingPidController.setAbsoluteTolerance(4); 
        balancingPidController.setOutputRange(-1.0, 1.0);  
        LiveWindow.addSensor("DriveSystem", "RealBuiltingAccel", balancingAccelerometer);
        

        driveSystemRightForwardUltra.setAverageBits(2);
        driveSystemLeftForwardUltra.setAverageBits(2);
        
    }
    
    
    
}
