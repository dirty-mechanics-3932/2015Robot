// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.subsystems;

import org.usfirst.frc3932.RobotMap;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon elevatorCANTalon = RobotMap.elevatorElevatorCANTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    protected int initialPosition = 0;
    
    public static final int GROUND = 0;
    public static final int TAB = 1;
    public static final int UNLOAD = 2;
    public static final int TRANSPORT = 3;

    public Elevator(){
    	elevatorCANTalon.changeControlMode(ControlMode.Position);
    	elevatorCANTalon.setVoltageRampRate(5.0);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    /**
     * Used by ResetElevatorPosition
     * @return the value of the limit switch
     */
    public boolean isLimitSwitchReached(){
    	return bottomLimitSwitch.get();
    }
    
    /**
     * Used by ResetElevatorPosition.  Causes the elevator to go down, without setting a position.
     */
    public void findBottom(){
    	elevatorCANTalon.changeControlMode(ControlMode.Speed);
    	elevatorCANTalon.set(-.5);
    }
    
    /**
     * Used by ResetElevatorPosition.  Cleans up after findBottom() and sets the ground position.
     */
    public void foundBottom(){
    	elevatorCANTalon.changeControlMode(ControlMode.Position);
    	setInitialPosition();
    	goToAbsolutePosition(Elevator.GROUND);
    }
    
    /**
     * Sets the ground position of the elevator.
     */
    public void setInitialPosition(){
    	elevatorCANTalon.setPosition(0);
    }
    
    /**
     * Goes to a certain height.
     * @param pos the height target
     */
    public void goToAbsolutePosition(int pos){
    	elevatorCANTalon.set(pos);
    }
}

