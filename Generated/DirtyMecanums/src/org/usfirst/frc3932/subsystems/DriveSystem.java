// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.subsystems;

import org.usfirst.frc3932.RobotMap;
import org.usfirst.frc3932.commands.Teleop;

import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;


/**
 *
 */
public class DriveSystem extends Subsystem {
	public static final double VOLTAGE_AT_WALL_DOCK_ULTRA = 1.6d;
	public final double VOLTAGE_AT_WALL_DOCK_ULTRA_LEFT = VOLTAGE_AT_WALL_DOCK_ULTRA;
	public final double VOLTAGE_AT_WALL_DOCK_ULTRA_RIGHT = VOLTAGE_AT_WALL_DOCK_ULTRA + 0.3d;
	public static final double VOLTAGE_AT_WALL_DOCK = .7d;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon leftFront = RobotMap.driveSystemLeftFront;
    CANTalon rightBack = RobotMap.driveSystemRightBack;
    CANTalon leftBack = RobotMap.driveSystemLeftBack;
    CANTalon rightFront = RobotMap.driveSystemRightFront;
    RobotDrive mecanumDrive = RobotMap.driveSystemMecanumDrive;
    AnalogInput leftForwardUltra = RobotMap.driveSystemLeftForwardUltra;
    AnalogInput rightForwardUltra = RobotMap.driveSystemRightForwardUltra;
    AnalogAccelerometer builtinAccelerometer = RobotMap.driveSystemBuiltinAccelerometer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
//    Gyro gyroOutput = new Gyro(gyro);
    Accelerometer accel = new BuiltInAccelerometer(Accelerometer.Range.k4G); 
    private final static double FORWARD_DRIVE_SPEED_SCALE = .3d;
    private final static double SIDEWAYS_DRIVE_SPEED_SCALE = .5d;
    private final static double TWIST_SPEED_SCALE = .5d; //0.4d before
	public static final double FINE_SPEED_SCALE = 0.5d;

	private static final double ULTRA_VOLTAGE_AT_WALL = 0.93d;

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Teleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
//        gyroOutput.reset();
    }
    
    public void drive(Joystick joystick){
    	double x = joystick.getX()*SIDEWAYS_DRIVE_SPEED_SCALE;
    	double y = joystick.getY()*FORWARD_DRIVE_SPEED_SCALE;
    	double twist = joystick.getRawAxis(2)*TWIST_SPEED_SCALE;
		if (joystick.getRawButton(1)){
			x *= FINE_SPEED_SCALE;
			y *= FINE_SPEED_SCALE;
			twist *= FINE_SPEED_SCALE;
		}
    	drive(x,y,twist);
    }
    
    public void drive(double x, double y, double twist){
    	mecanumDrive.mecanumDrive_Cartesian(adjust(x), adjust(y), adjust(twist), 0);
    }
    protected double adjust(double val){
//    	return adjust(val, 50);
    	return val;
    }

    protected double adjust(double val, double factor){
    	return (val<0?-1:1) * (Math.pow(factor, Math.abs(val)) - 1) / (factor-1);
    }
    


	public void stop() {
		drive(0d,0d,0d);
	}
	
	public boolean isLeftUltraTargetReached()
	{
		return (leftForwardUltra.getAverageVoltage() > ULTRA_VOLTAGE_AT_WALL);
	}
	
	public boolean isRightUltraTargetReached()
	{
		return (rightForwardUltra.getAverageVoltage() > ULTRA_VOLTAGE_AT_WALL);
	}
	
	
}

