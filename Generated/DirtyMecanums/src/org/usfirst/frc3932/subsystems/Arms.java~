// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.subsystems;

import org.usfirst.frc3932.RobotMap;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Arms extends Subsystem {

	public static final double RANGE = 4.0;
	public static final double OFFSET = 0.5;
	public static final double VOLTS_PER_DEGREE = RANGE/120d;
	
	public static final double GRAB = 3.0; // unknown
	public static final double START = GRAB - 30*VOLTS_PER_DEGREE;
	public static final double BACKOUT = GRAB + 5*VOLTS_PER_DEGREE;
	public static final double WIDE = GRAB + 5*VOLTS_PER_DEGREE;

			
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon armWidthCANTalon = RobotMap.armsArmWidthCANTalon;
    AnalogPotentiometer armEncoder = RobotMap.armsArmEncoder;
    PIDController pIDController1 = RobotMap.armsPIDController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	armWidthCANTalon.setPID(50d, 0d, 0d);
    
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLocation(double setpoint) {

    	pIDController1.setSetpoint(setpoint);
    }
    
    
    public void armsClose() // START position
    {
    	// at 250
    	setLocation(START);
    }
    
    public void armsHalfOpen() // GRAB position
    {
    	setLocation(GRAB);
    }
    
    public void armsBackout() // BACKOUT position
    {
    	setLocation(BACKOUT);
    }
    
    public void armsFullOpen() // WIDE position
    {
    	// at 0
		setLocation(WIDE);
    }

	public boolean atSetpoint() {
		return armWidthCANTalon.get() == armWidthCANTalon.getPosition();
	}
}

